const channels = {};
const intervals = {};

function runSubscription(channelName, loadDataFunction, options) {
    options = Object.assign({ timeout: 5000 }, options);

    return setInterval(() => {
        loadDataFunction().then(data => {
            channels[channelName].forEach(socket => {
                socket.emit('update', { data: data });
            });
        });
    }, options.timeout);
}

module.exports = function() {
    return function(channelName) {
        function deleteFromChannel(socket) {
            channels[channelName].delete(socket);

            if (!channels[channelName].size) {
                console.log(`channer ${channelName} was removed`);
                
                clearInterval(intervals[channelName]);
                delete intervals[channelName];
                delete channels[channelName];
            }
        }
        
        return {
            subscribe: function(socket, loadDataFunction, options) {
                if (channels[channelName] && channels[channelName].has(socket)) {
                    return false;
                }

                channels[channelName] = channels[channelName] || new Set();
                channels[channelName].add(socket);

                if (!intervals[channelName]) {
                    intervals[channelName] = runSubscription(channelName, loadDataFunction, options);
                }

                loadDataFunction().then(data => {
                    socket.emit('update', { data: data }); // что если клиент уже отсоединился?
                });

                socket.on('disconnect', () => {
                    deleteFromChannel(socket);
                });

                return true;
            },

            unsubscribe: function(socket) {
                if (!channels[channelName] || !channels[channelName].has(socket)) {
                    return false;
                }

                deleteFromChannel(socket);
                
                return true;
            }
        };
    };
};